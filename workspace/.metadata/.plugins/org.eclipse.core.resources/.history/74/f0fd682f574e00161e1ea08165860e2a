package com.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import com.model.*;

public class Dao {
	//驱动类的名称
	protected static String dbClassName = "com.mysql.jdbc.Driver";
	//数据库URL
	protected static String dbUrl = "jdbc:mysql://localhost:3306/takeout_db"
			+ "?characterEncoding=utf8&useSSL=false";
	protected static String dbUser = "root";//数据库用户名
	protected static String dbPwd = "123321123++";//数据库密码
	protected static Connection conn = null;//数据库连接对象
	
	static {//在静态代码段中初始化Dao类，实现数据库的连接和驱动的加载
		try {
			if (conn == null) {
				Class.forName(dbClassName);
				System.out.println("数据库加载成功");
				conn = DriverManager.getConnection(dbUrl, dbUser, dbPwd);
				System.out.println("数据库连接成功");
			} 
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private Dao() {//封闭构造方法，禁止创建Dao类的实例对象
	}
	
	//读取用户对象
	public static Usercustom getCustomInfo(String account) {
		String where = "where account= '" + account + "'";
		Usercustom info = new Usercustom();
		ResultSet set = findForResultSet("select * from user_custom " + where);
		try {
			if (set.next() != false) {
				info.setId_custom(set.getInt("id_custom"));
				info.setName(set.getString("name"));
				info.setAccount(set.getString("account"));
				info.setPassword(set.getString("password"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return info;//将数据模型返回
	}
	//读取商户对象
	public static Userbusiness getBusinessInfo(String account) {
		String where = "where account= '" + account + "'";
		Userbusiness info = new Userbusiness();
		ResultSet set = findForResultSet("select * from user_business " + where);
		try {
			if (set.next() != false) {
				info.setId_business(set.getInt("id_custom"));
				info.setName(set.getString("name"));
				info.setAccount(set.getString("account"));
				info.setPassword(set.getString("password"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return info;//将数据模型返回
	}
	//读取订单对象
	public static Order getOrderInfo(int id_order) {
		String where = "id_order= " + id_order + "";
		Order info = new Order();
		ResultSet set = findForResultSet("select * from order where " + where);
		try {
			if (set.next() != false) {
				info.setFeedback(set.getString("feedback"));
				info.setId_cuition(set.getInt("id_cuition"));
				info.setId_custom(set.getInt("id_custom"));
				info.setId_order(set.getInt("id_order"));
				info.setNum(set.getInt("num"));
				info.setSpot(set.getString("spot"));
				info.setStar(set.getInt("star"));
				info.setStatus(set.getInt("status"));
				info.setTime(set.getString("time"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return info;
	}
	//读取菜单菜单
	public static Cuisine getCuisineInfo(int id_cuision) {
		String where = "id_order= " + id_cuision + "";
		Cuisine info = new Cuisine();
		ResultSet set1 = findForResultSet("select * from cuision where " + where);//查询菜单
		ResultSet set2 = findForResultSet("select describe, star, num from order where " + where);//补充查询
		int star = 0;
		int num = 0;
		ArrayList<String> feedback = new ArrayList<>();
		try {
			while (set2.next()) {//补充查询的结果汇总及计算
				star = star + set2.getInt("star");
				num = num + set2.getInt("num");
				feedback.add(where);
			}
			if (feedback.size() != 0) {//判断有评分的情况
				star = star / feedback.size();
			} else {
				star = 0;
			}
			if (set1.next() != false) {//有菜单，不一定有订单
				info.setDescribe(set1.getString("describe"));
				info.setId_business(set1.getInt("id_business"));
				info.setId_cuisine(set1.getInt("id_cuisine"));
				info.setName(set1.getString("name"));
				info.setPrice(set1.getFloat("price"));
				info.setSale(num);
				info.setStar(star);
				info.setFeedback(feedback);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return info;
	}
	//判断登陆
	public static boolean checkCustomLogin (String name, String password) {
		ResultSet set = findForResultSet("select * from user_custom where name= '"
				+ name + "' and password= '" + password + "'");
		try {
			return set.next();//如果能查询得到，就会返回true
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}
	public static boolean checkBusinessLogin (String name, String password) {
		ResultSet set = findForResultSet("select * from user_business where name= '"
				+ name + "' and password= '" + password + "'");
		try {
			return set.next();//如果能查询得到，就会返回true
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}
	//插入方法
	public static int insert(String sql) {
		return update(sql);
	}
	//删除方法
	public static int delete(String sql) {
		return update(sql);
	}
	//更新方法
	public static int update(String sql) {
		int result = 0;
		try {
			Statement stmt = conn.createStatement();
			result = stmt.executeUpdate(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	//查询方法
	public static ResultSet findForResultSet(String sql) {
		if (conn == null)//若连接不成功则返回空
			return null;
		ResultSet rs = null;
		try {
			rs = conn.createStatement().executeQuery(sql);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rs;
	}
}
