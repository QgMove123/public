package com.server;

import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;

import com.control.Control;
import com.model.Common;

public class server {
	private ServerSocket ssocket = null;
	private boolean bStart = false; //标记是否连接服务器
	
	List<Client> clients = new ArrayList<Client>();//建立Client类数组
	
	public void MainServer() {
		try {
			ssocket = new ServerSocket(50000);//设置端口值
			bStart = true;//连接成功
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		try {
			while(bStart) {
				System.out.println("等待新用户用户连接...");
				Socket socket = ssocket.accept();//等待客户端连接
				System.out.println("服务器套接字创建成功！");
				Client client = new Client(socket);
				clients.add(client);//添加客户进入Client类数组
				
				System.out.println(socket.getInetAddress().getHostAddress()
						+ " connected " + clients.size() + " clients\n");
				new Thread(client).start();//开启此线程
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				ssocket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	private class Client implements Runnable {
		ObjectInputStream myin = null;//定义输入流
		ObjectOutput myout = null;//定义输出流
		
		Socket socket = null;
		boolean bStart = false;
		
		Client(Socket socket) {//有参构造方法
			this.socket = socket;
			try {
				myout = new ObjectOutputStream(socket.getOutputStream());//获取客户端输出流
				myin = new ObjectInputStream(socket.getInputStream());//获取客户端输入流
				bStart = true;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		//发送给每一个客户端
		public void sentToEveryClient(Common com) {
			try {
				myout.writeObject(com);
				myout.flush();
			} catch (IOException e) {
				// TODO: handle exception
				clients.remove(this);
				System.out.println(socket.getInetAddress().getHostAddress()
						+ " connected " + clients.size() + " clients\n");
			}
		}
		
		public void run() {
			try {
				Control control = new Control();
				boolean send;
				while (bStart) {
					Common com = (Common) myin.readObject();//读取信息流commom的信息
					send = true;//默认是会回传信息的
					/*留 - 测试用*/
					switch (com.getStatus()) {
					case 1:
						com = control.register(com);
						break;
					case 2:
						com = control.login(com);
						break;
					case 3:
						com = control.showCuisine(com);
						break;
					case 4:
						com = control.showOrder(com);
						break;
					case 5:
						control.addOrder(com);
						send = false;
						break;
					case 6:
						control.deleteOrder(com);
						send = false;
						break;
					case 7:
						control.addCuisine(com);
						send = false;
						break;
					case 8:
						control.deleteCuisine(com);
						send = false;
						break;
					case 9:
						control.modefyCuisine(com);
						send = false;
						break;
					case 10:
						com = control.modefyOrder(com);
						break;
					default:
						break;
					}
					if (send == true) {
						for (int i = 0; i < clients.size(); i++) {//发送给每一客户端
							Client client = clients.get(i);
							client.sentToEveryClient(com);
						}
					}
				}
			} catch (EOFException e) {
				clients.remove(this);
				System.out.println(socket.getInetAddress().getHostAddress()
						+ " exited " + clients.size() + " clients\n");
				System.out.println("client closed");
			} catch (SocketException e) {
				clients.remove(this);
				System.out.println(socket.getInetAddress().getHostAddress()
						+ " exited " + clients.size() + " clients\n");
				System.out.println("client closed(unNormal)");
			} catch (IOException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				try {
					if (socket != null)
						socket.close();
					if (myin != null)
						myin.close();
					if (myout != null)
						myout.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	public static void main(String args[]) {
		server server = new server();
		server.MainServer();
	}
}
